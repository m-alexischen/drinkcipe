{"ast":null,"code":"var _jsxFileName = \"/Users/alexis/Desktop/duo/src/pages/Recipes/components/form/RecipeForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport Card from '../../../../components/UI/Card/Card';\nimport LoadingSpinner from '../../../../components/UI/LoadingSpinner/LoadingSpinner';\nimport Modal from '../../../../components/UI/Modal/Modal';\nimport Backdrop from '../../../../components/UI/Backdrop/Backdrop';\nimport classes from './RecipeForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RecipeForm = props => {\n  _s();\n\n  const [showModal, setShowModal] = useState(false);\n  const drinkNameInputRef = useRef();\n  const bartenderInputRef = useRef();\n\n  const submitFormHandler = event => {\n    event.preventDefault();\n    const enteredDrinkName = drinkNameInputRef.current.value;\n    const enteredBartender = bartenderInputRef.current.value; // optional: Could validate here\n\n    props.onAddRecipe({\n      drinkName: enteredDrinkName,\n      bartender: enteredBartender\n    });\n  };\n\n  const toggleModalHandler = () => {\n    setShowModal(!showModal);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.form,\n      onSubmit: submitFormHandler,\n      children: [props.isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.loading,\n        children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"drinkName\",\n          children: \"Drink Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"drinkName\",\n          ref: drinkNameInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"bartender\",\n          children: \"Bartender\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"bartender\",\n          ref: bartenderInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: toggleModalHandler,\n          children: \"Add Recipe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n        onClick: toggleModalHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 23\n      }, this), showModal && /*#__PURE__*/_jsxDEV(Backdrop, {\n        onCancel: toggleModalHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RecipeForm, \"NLMTw6y2I5KrZ5u0UKFNlig/dCs=\");\n\n_c = RecipeForm;\nexport default RecipeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeForm\");","map":{"version":3,"sources":["/Users/alexis/Desktop/duo/src/pages/Recipes/components/form/RecipeForm.js"],"names":["useState","useRef","Card","LoadingSpinner","Modal","Backdrop","classes","RecipeForm","props","showModal","setShowModal","drinkNameInputRef","bartenderInputRef","submitFormHandler","event","preventDefault","enteredDrinkName","current","value","enteredBartender","onAddRecipe","drinkName","bartender","toggleModalHandler","form","isLoading","loading","control","actions"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,qCAAjB;AACA,OAAOC,cAAP,MAA2B,yDAA3B;AACA,OAAOC,KAAP,MAAkB,uCAAlB;AACA,OAAOC,QAAP,MAAqB,6CAArB;AACA,OAAOC,OAAP,MAAoB,yBAApB;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC5B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMW,iBAAiB,GAAGV,MAAM,EAAhC;AACA,QAAMW,iBAAiB,GAAGX,MAAM,EAAhC;;AAEA,QAAMY,iBAAiB,GAAIC,KAAD,IAAW;AACnCA,IAAAA,KAAK,CAACC,cAAN;AAEA,UAAMC,gBAAgB,GAAGL,iBAAiB,CAACM,OAAlB,CAA0BC,KAAnD;AACA,UAAMC,gBAAgB,GAAGP,iBAAiB,CAACK,OAAlB,CAA0BC,KAAnD,CAJmC,CAMnC;;AAEAV,IAAAA,KAAK,CAACY,WAAN,CAAkB;AAAEC,MAAAA,SAAS,EAAEL,gBAAb;AAA+BM,MAAAA,SAAS,EAAEH;AAA1C,KAAlB;AACD,GATD;;AAWA,QAAMI,kBAAkB,GAAG,MAAM;AAC/Bb,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD,GAFD;;AAKA,sBACE,QAAC,IAAD;AAAA,2BACE;AAAM,MAAA,SAAS,EAAEH,OAAO,CAACkB,IAAzB;AAA+B,MAAA,QAAQ,EAAEX,iBAAzC;AAAA,iBACGL,KAAK,CAACiB,SAAN,iBACC;AAAK,QAAA,SAAS,EAAEnB,OAAO,CAACoB,OAAxB;AAAA,+BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFJ,eAME;AAAK,QAAA,SAAS,EAAEpB,OAAO,CAACqB,OAAxB;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,EAAE,EAAC,WAAtB;AAAkC,UAAA,GAAG,EAAEhB;AAAvC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAUE;AAAK,QAAA,SAAS,EAAEL,OAAO,CAACqB,OAAxB;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,EAAE,EAAC,WAAtB;AAAkC,UAAA,GAAG,EAAEf;AAAvC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,eAeE;AAAK,QAAA,SAAS,EAAEN,OAAO,CAACsB,OAAxB;AAAA,+BACE;AAAQ,UAAA,SAAS,EAAC,KAAlB;AAAwB,UAAA,OAAO,EAAEL,kBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAfF,EAkBGd,SAAS,iBAAI,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEc;AAAhB;AAAA;AAAA;AAAA;AAAA,cAlBhB,EAmBGd,SAAS,iBAAI,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAEc;AAApB;AAAA;AAAA;AAAA;AAAA,cAnBhB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CA9CD;;GAAMhB,U;;KAAAA,U;AAgDN,eAAeA,UAAf","sourcesContent":["import { useState, useRef } from 'react';\nimport Card from '../../../../components/UI/Card/Card';\nimport LoadingSpinner from '../../../../components/UI/LoadingSpinner/LoadingSpinner';\nimport Modal from '../../../../components/UI/Modal/Modal';\nimport Backdrop from '../../../../components/UI/Backdrop/Backdrop';\nimport classes from './RecipeForm.module.css';\n\nconst RecipeForm = (props) => {\n  const [showModal, setShowModal] = useState(false);\n  const drinkNameInputRef = useRef();\n  const bartenderInputRef = useRef();\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredDrinkName = drinkNameInputRef.current.value;\n    const enteredBartender = bartenderInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddRecipe({ drinkName: enteredDrinkName, bartender: enteredBartender });\n  };\n\n  const toggleModalHandler = () => {\n    setShowModal(!showModal);\n  };\n\n\n  return (\n    <Card>\n      <form className={classes.form} onSubmit={submitFormHandler}>\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n        <div className={classes.control}>\n          <label htmlFor='drinkName'>Drink Name</label>\n          <input type='text' id='drinkName' ref={drinkNameInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='bartender'>Bartender</label>\n          <input type='text' id='bartender' ref={bartenderInputRef} />\n        </div>\n        \n        <div className={classes.actions}>\n          <button className='btn' onClick={toggleModalHandler}>Add Recipe</button>\n        </div>\n        {showModal && <Modal onClick={toggleModalHandler} />}\n        {showModal && <Backdrop onCancel={toggleModalHandler} />}\n      </form>\n    </Card>\n  );\n};\n\nexport default RecipeForm;\n"]},"metadata":{},"sourceType":"module"}