{"ast":null,"code":"const LOCAL_HOST = 'http://localhost:8080';\n\nconst headerHandler = (data, method) => {\n  return {\n    method: method,\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n};\n\nasync function dataFetchHandler(url, params, errorMessage) {\n  const response = await fetch(url, params);\n  const data = await response.json();\n\n  if (!response.ok) {\n    if (!errorMessage) {\n      errorMessage = 'Could not fetch data.';\n    }\n\n    throw new Error(data.message || errorMessage);\n  }\n\n  ;\n  return data;\n}\n\n;\nexport async function login(data) {\n  const dataOutput = dataFetchHandler(`${LOCAL_HOST}/api/auth/signin`, headerHandler(data, 'POST'));\n  return dataOutput;\n}\n;\nexport async function signup(data) {\n  const dataOutput = dataFetchHandler(`${LOCAL_HOST}/api/auth/signup`, headerHandler(data, 'POST'));\n  return dataOutput;\n}\n;\nexport async function getAllRecipes() {\n  const data = dataFetchHandler(`${LOCAL_HOST}/recipes.json`);\n  const transformedRecipes = [];\n\n  for (const key in data) {\n    const recipeObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedRecipes.push(recipeObj);\n  }\n\n  return transformedRecipes;\n}\n;\nexport async function getSingleRecipe(recipeId) {\n  const data = dataFetchHandler(`${LOCAL_HOST}/recipes/${recipeId}.json`);\n  const loadedRecipe = {\n    id: recipeId,\n    ...data\n  };\n  return loadedRecipe;\n}\n;\nexport async function addRecipe(recipeData) {\n  dataFetchHandler(`${LOCAL_HOST}/recipes.json`, {\n    method: 'POST',\n    body: JSON.stringify(recipeData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  return null;\n}\n;\nexport async function addComment(requestData) {\n  const data = dataFetchHandler(`${LOCAL_HOST}/comments/${requestData.recipeId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  return {\n    commentId: data.name\n  };\n}\n;\nexport async function getAllComments(recipeId) {\n  const data = dataFetchHandler(`${LOCAL_HOST}/comments/${recipeId}.json`);\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n;","map":{"version":3,"sources":["/Users/alexis/Desktop/duo/src/components/lib/api.js"],"names":["LOCAL_HOST","headerHandler","data","method","body","JSON","stringify","headers","dataFetchHandler","url","params","errorMessage","response","fetch","json","ok","Error","message","login","dataOutput","signup","getAllRecipes","transformedRecipes","key","recipeObj","id","push","getSingleRecipe","recipeId","loadedRecipe","addRecipe","recipeData","addComment","requestData","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"mappings":"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","sourcesContent":["const LOCAL_HOST = 'http://localhost:8080';\n\nconst headerHandler = (data, method) => {\n    return {\n        method: method,\n        body: JSON.stringify(data),\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    }\n};\n\nasync function dataFetchHandler(url, params, errorMessage) {\n    const response = await fetch(url, params);\n    const data = await response.json();\n\n    if (!response.ok) {\n        if (!errorMessage) {\n            errorMessage = 'Could not fetch data.'\n        }\n        throw new Error(data.message || errorMessage);\n    };\n    \n    return data;\n};\n\nexport async function login(data) {\n    const dataOutput = dataFetchHandler(`${LOCAL_HOST}/api/auth/signin`, headerHandler(data, 'POST'));\n\n    return dataOutput;\n};\n\nexport async function signup(data) {\n    const dataOutput = dataFetchHandler(`${LOCAL_HOST}/api/auth/signup`, headerHandler(data, 'POST'));\n\n    return dataOutput;\n};\n\nexport async function getAllRecipes() {\n    const data = dataFetchHandler(`${LOCAL_HOST}/recipes.json`);\n\n    const transformedRecipes = [];\n\n    for (const key in data) {\n        const recipeObj = {\n            id: key,            \n            ...data[key],\n        };\n\n        transformedRecipes.push(recipeObj);\n    }\n\n    return transformedRecipes;\n};\n\nexport async function getSingleRecipe(recipeId) {\n    const data = dataFetchHandler(`${LOCAL_HOST}/recipes/${recipeId}.json`);\n\n    const loadedRecipe = {\n        id: recipeId,\n        ...data,\n    };\n\n    return loadedRecipe;\n};\n\nexport async function addRecipe(recipeData) {\n    dataFetchHandler(`${LOCAL_HOST}/recipes.json`, {\n        method: 'POST',\n        body: JSON.stringify(recipeData),\n        headers: {\n        'Content-Type': 'application/json',\n        },\n    });\n\n    return null;\n};\n\nexport async function addComment(requestData) {\n    const data = dataFetchHandler(`${LOCAL_HOST}/comments/${requestData.recipeId}.json`, {\n        method: 'POST',\n        body: JSON.stringify(requestData.commentData),\n        headers: {\n        'Content-Type': 'application/json',\n        },\n    });\n\n    return { commentId: data.name };\n};\n\nexport async function getAllComments(recipeId) {\n    const data = dataFetchHandler(`${LOCAL_HOST}/comments/${recipeId}.json`);\n\n    const transformedComments = [];\n\n    for (const key in data) {\n        const commentObj = {\n        id: key,\n        ...data[key],\n        };\n\n        transformedComments.push(commentObj);\n    }\n\n    return transformedComments;\n};"]},"metadata":{},"sourceType":"module"}