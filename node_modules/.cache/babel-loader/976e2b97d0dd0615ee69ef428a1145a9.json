{"ast":null,"code":"var _jsxFileName = \"/Users/alexis/Desktop/duo/src/pages/Recipes/components/form/RecipeForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Card from '../../../../components/UI/Card/Card';\nimport LoadingSpinner from '../../../../components/UI/LoadingSpinner/LoadingSpinner';\nimport Modal from '../../../../components/UI/Modal/Modal';\nimport Backdrop from '../../../../components/UI/Backdrop/Backdrop';\nimport classes from './RecipeForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RecipeForm = props => {\n  _s();\n\n  const [showModal, setShowModal] = useState(false);\n  const [drinkNameInput, setDrinkNameInput] = useState('');\n  const [bartenderInput, setBartenderInput] = useState('');\n  const [inputValue, setInputValue] = useState([{\n    ingredient: '',\n    volume: ''\n  }]);\n\n  const showModalHandler = () => {\n    setShowModal(true);\n  };\n\n  const closeModalHandler = () => {\n    setShowModal(false);\n  };\n\n  const updatedrinkNameHandler = event => {\n    event.preventDefault();\n    setDrinkNameInput(event.target.value);\n  };\n\n  const updateBartenderHandler = event => {\n    event.preventDefault();\n    setBartenderInput(event.target.value);\n  };\n\n  const updateInputHandler = (i, event) => {\n    event.preventDefault();\n    const newInputValue = [...inputValue];\n    newInputValue[i][event.target.name] = event.target.value;\n    setInputValue(newInputValue);\n  };\n\n  const addInputFieldHandler = () => {\n    setInputValue([...inputValue, {\n      ingredient: '',\n      volume: ''\n    }]);\n  };\n\n  const checkFormHandler = event => {\n    event.preventDefault();\n\n    if (drinkNameInput === '' || bartenderInput === '') {\n      alert('Please fill out whole form!');\n      return;\n    } else {\n      showModalHandler();\n    }\n\n    ;\n  };\n\n  const submitFormHandler = event => {\n    event.preventDefault();\n    props.onAddRecipe({\n      drinkName: drinkNameInput,\n      bartender: bartenderInput\n    });\n    setDrinkNameInput('');\n    setBartenderInput('');\n  };\n\n  const removeInputFieldHander = i => {\n    const newInputValue = [...inputValue];\n    newInputValue.splice(i, 1);\n    setInputValue(newInputValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.form,\n      onSubmit: submitFormHandler,\n      children: [props.isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.loading,\n        children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"drinkName\",\n          children: \"Drink Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"drinkName\",\n          onChange: updatedrinkNameHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"bartender\",\n          children: \"Bartender\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"bartender\",\n          onChange: updateBartenderHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [inputValue.map((element, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Ingredient\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"ingredient\",\n            value: element.ingredient || \"\",\n            onChange: e => updateInputHandler(index, e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Volume\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"volume\",\n            value: element.volume || \"\",\n            onChange: e => updateInputHandler(index, e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), index ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            type: \"button\",\n            onClick: () => removeInputFieldHander(index),\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 24\n          }, this) : null]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            type: \"button\",\n            onClick: addInputFieldHandler,\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          type: \"button\",\n          onClick: checkFormHandler,\n          children: \"Add Recipe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n          onConfirm: submitFormHandler,\n          onCancel: closeModalHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this), showModal && /*#__PURE__*/_jsxDEV(Backdrop, {\n          onCancel: closeModalHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RecipeForm, \"Ssw1ximiAhi317kcXs9W8xCn3UE=\");\n\n_c = RecipeForm;\nexport default RecipeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeForm\");","map":{"version":3,"sources":["/Users/alexis/Desktop/duo/src/pages/Recipes/components/form/RecipeForm.js"],"names":["useState","Card","LoadingSpinner","Modal","Backdrop","classes","RecipeForm","props","showModal","setShowModal","drinkNameInput","setDrinkNameInput","bartenderInput","setBartenderInput","inputValue","setInputValue","ingredient","volume","showModalHandler","closeModalHandler","updatedrinkNameHandler","event","preventDefault","target","value","updateBartenderHandler","updateInputHandler","i","newInputValue","name","addInputFieldHandler","checkFormHandler","alert","submitFormHandler","onAddRecipe","drinkName","bartender","removeInputFieldHander","splice","form","isLoading","loading","control","map","element","index","e","actions"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport Card from '../../../../components/UI/Card/Card';\nimport LoadingSpinner from '../../../../components/UI/LoadingSpinner/LoadingSpinner';\nimport Modal from '../../../../components/UI/Modal/Modal';\nimport Backdrop from '../../../../components/UI/Backdrop/Backdrop';\nimport classes from './RecipeForm.module.css';\n\nconst RecipeForm = (props) => {\n  const [showModal, setShowModal] = useState(false);\n  const [drinkNameInput, setDrinkNameInput] = useState('');\n  const [bartenderInput, setBartenderInput] = useState('');\n  const [inputValue, setInputValue] = useState([{ ingredient: '', volume : '' }]);\n\n  const showModalHandler = ()=> {\n    setShowModal(true);\n  };\n  \n  const closeModalHandler = () => {\n    setShowModal(false);\n  };\n\n  const updatedrinkNameHandler = (event) => {\n    event.preventDefault();\n    setDrinkNameInput(event.target.value);\n  };\n\n  const updateBartenderHandler = (event) => {\n    event.preventDefault();\n    setBartenderInput(event.target.value);\n  };\n\n  const updateInputHandler = (i, event) => {\n    event.preventDefault();\n    const newInputValue = [...inputValue];\n    newInputValue[i][event.target.name] = event.target.value;\n    setInputValue(newInputValue);\n  };\n  const addInputFieldHandler = () => {\n    setInputValue([...inputValue, { ingredient: '', volume: '' }])\n  };\n\n  const checkFormHandler = (event) => {\n    event.preventDefault();\n\n    if (drinkNameInput === '' || bartenderInput === '') {\n      alert('Please fill out whole form!');\n      return;\n    } else {\n      showModalHandler();\n    };\n  };\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    props.onAddRecipe({ drinkName: drinkNameInput, bartender: bartenderInput });\n\n    setDrinkNameInput('');\n    setBartenderInput('');\n  };\n\n  const removeInputFieldHander = (i) => {\n    const newInputValue = [...inputValue]; \n    newInputValue.splice(i, 1);\n    setInputValue(newInputValue);\n  };\n\n  return (\n    <Card>\n      <form className={classes.form} onSubmit={submitFormHandler}>\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n        <div className={classes.control}>\n          <label htmlFor='drinkName'>Drink Name</label>\n          <input type='text' id='drinkName' onChange={updatedrinkNameHandler} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='bartender'>Bartender</label>\n          <input type='text' id='bartender' onChange={updateBartenderHandler} />\n        </div>\n        <div>\n          {inputValue.map((element, index) => (\n            <div className={classes.control} key={index}>\n              <label>Ingredient</label>\n              <input type='text' name='ingredient' value={element.ingredient || \"\"} onChange={e => updateInputHandler(index, e)} />\n              <label>Volume</label>\n              <input type='text' name='volume' value={element.volume || \"\"} onChange={e => updateInputHandler(index, e)} />\n              {index ? <button className='btn' type='button' onClick={() => removeInputFieldHander(index)}>Remove</button> : null}\n            </div>\n          ))}\n          <div>\n            <button className='btn' type='button' onClick={addInputFieldHandler}>Add</button>\n          </div>\n        </div>\n        <div className={classes.actions}>\n          <button className='btn' type='button' onClick={checkFormHandler}>Add Recipe</button>\n          {showModal && <Modal onConfirm={submitFormHandler} onCancel={closeModalHandler} />}\n          {showModal && <Backdrop onCancel={closeModalHandler} />}\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default RecipeForm;\n"]},"metadata":{},"sourceType":"module"}