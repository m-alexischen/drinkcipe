{"ast":null,"code":"var _jsxFileName = \"/Users/alexis/Desktop/duo/src/pages/Recipes/components/form/RecipeForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport Card from '../../../../components/UI/Card/Card';\nimport LoadingSpinner from '../../../../components/UI/LoadingSpinner/LoadingSpinner';\nimport Modal from '../../../../components/UI/Modal/Modal';\nimport Backdrop from '../../../../components/UI/Backdrop/Backdrop';\nimport classes from './RecipeForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RecipeForm = props => {\n  _s();\n\n  const [showModal, setShowModal] = useState(false);\n  const drinkNameInputRef = useRef();\n  const bartenderInputRef = useRef();\n\n  const showModalHandler = () => {\n    setShowModal(true);\n  };\n\n  const closeModalHandler = () => {\n    setShowModal(false);\n  };\n\n  const enteredDrinkName = drinkNameInputRef.current.value;\n  const enteredBartender = bartenderInputRef.current.value;\n\n  const checkFormHandler = event => {\n    event.preventDefault();\n    const notValid = enteredDrinkName.trim() === '' || enteredBartender.trim() === '';\n\n    if (notValid) {\n      alert('Please fill out whole form!');\n      return;\n    } else {\n      showModalHandler();\n    }\n\n    ;\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onAddRecipe({\n      drinkName: enteredDrinkName,\n      bartender: enteredBartender\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.form,\n      onSubmit: submitHandler,\n      children: [props.isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.loading,\n        children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"drinkName\",\n          children: \"Drink Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"drinkName\",\n          ref: drinkNameInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"bartender\",\n          children: \"Bartender\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"bartender\",\n          ref: bartenderInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          type: \"button\",\n          onClick: checkFormHandler,\n          children: \"Add Recipe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n        onConfirm: closeModalHandler,\n        onCancel: closeModalHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 23\n      }, this), showModal && /*#__PURE__*/_jsxDEV(Backdrop, {\n        onCancel: closeModalHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RecipeForm, \"NLMTw6y2I5KrZ5u0UKFNlig/dCs=\");\n\n_c = RecipeForm;\nexport default RecipeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeForm\");","map":{"version":3,"sources":["/Users/alexis/Desktop/duo/src/pages/Recipes/components/form/RecipeForm.js"],"names":["useState","useRef","Card","LoadingSpinner","Modal","Backdrop","classes","RecipeForm","props","showModal","setShowModal","drinkNameInputRef","bartenderInputRef","showModalHandler","closeModalHandler","enteredDrinkName","current","value","enteredBartender","checkFormHandler","event","preventDefault","notValid","trim","alert","submitHandler","onAddRecipe","drinkName","bartender","form","isLoading","loading","control","actions"],"mappings":"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","sourcesContent":["import { useState, useRef } from 'react';\nimport Card from '../../../../components/UI/Card/Card';\nimport LoadingSpinner from '../../../../components/UI/LoadingSpinner/LoadingSpinner';\nimport Modal from '../../../../components/UI/Modal/Modal';\nimport Backdrop from '../../../../components/UI/Backdrop/Backdrop';\nimport classes from './RecipeForm.module.css';\n\nconst RecipeForm = (props) => {\n  const [showModal, setShowModal] = useState(false);\n  const drinkNameInputRef = useRef();\n  const bartenderInputRef = useRef();\n\n  const showModalHandler = ()=> {\n    setShowModal(true);\n  };\n  \n  const closeModalHandler = () => {\n    setShowModal(false);\n  };\n\n  const enteredDrinkName = drinkNameInputRef.current.value;\n  const enteredBartender = bartenderInputRef.current.value;\n\n  const checkFormHandler = (event) => {\n    event.preventDefault();\n\n    \n  \n    const notValid = (enteredDrinkName.trim() === '' || enteredBartender.trim() === '')\n\n    if (notValid) {\n      alert('Please fill out whole form!');\n      return;\n    } else {\n      showModalHandler();\n    };\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onAddRecipe({ drinkName: enteredDrinkName, bartender: enteredBartender });\n  };\n\n  return (\n    <Card>\n      <form className={classes.form} onSubmit={submitHandler}>\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n        <div className={classes.control}>\n          <label htmlFor='drinkName'>Drink Name</label>\n          <input type='text' id='drinkName' ref={drinkNameInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='bartender'>Bartender</label>\n          <input type='text' id='bartender' ref={bartenderInputRef} />\n        </div>\n        \n        <div className={classes.actions}>\n          <button className='btn' type='button' onClick={checkFormHandler}>Add Recipe</button>\n        </div>\n        {showModal && <Modal onConfirm={closeModalHandler} onCancel={closeModalHandler} />}\n        {showModal && <Backdrop onCancel={closeModalHandler} />}\n      </form>\n    </Card>\n  );\n};\n\nexport default RecipeForm;\n"]},"metadata":{},"sourceType":"module"}